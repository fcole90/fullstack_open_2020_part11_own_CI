{"version":3,"sources":["types.ts","constants.ts","state/reducer.ts","state/state.tsx","components/FormFields.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","components/GenderIcon.tsx","components/EntryDetails.tsx","utils.ts","components/DiagnosesList.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientDetailPage/index.tsx","App.tsx","index.tsx"],"names":["HealthCheckRating","Gender","apiBaseUrl","setPatientList","patientListFromApi","type","payload","setDiagnosesList","diagnosesListFromApi","updatePatient","patient","initialState","patients","diagnoses","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","GenderSelectField","props","TextField","field","placeholder","style","color","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","diagnosis","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","data","genderOptions","Object","values","genderValue","str","charAt","toUpperCase","slice","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","Other","validate","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","console","log","axios","post","newPatient","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","id","Cell","to","GenderIcon","Icon","BaseEntryDetals","entry","extras","headers","Card","date","size","Description","description","extra","HealthCheckDetails","healthCheckRating","OccupationalHealthcareDetails","employerName","sickLeave","startDate","endDate","HospitalDetails","discharge","criteria","EntryDetails","Error","JSON","stringify","assertNever","DiagnosesList","entryTypeOptions","AddEntryForm","formType","setFormType","baseValues","specialist","diagnosisCodes","healthCheckValues","hospitalValues","occupationalHealthcareValues","isValidDate","x","length","isNaN","Date","parse","v","prepareSubmission","requiredError","Select","AddEntryModal","PatientDetailPage","patientIdMatch","useParams","submitNewEntry","updatedPatient","List","Item","entries","Group","marginTop","App","useEffect","get","fetchPatientList","fetchDiagnosesList","Link","primary","Divider","hidden","path","ReactDOM","render","action","reduce","otherPatients","otherDiagnoses","document","getElementById"],"mappings":"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","file":"static/js/main.acc233b4.chunk.js","sourcesContent":["// ---------------------------------------------------------------------------------------------------------------------------------------\n// By: Andrii Dieiev\n// From: https://github.com/microsoft/TypeScript/issues/39556#issuecomment-656925230\nexport type UnionOmit<T, K extends string | number | symbol> = T extends unknown ? Omit<T, K> : never;\n// ---------------------------------------------------------------------------------------------------------------------------------------\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3\n}\n\nexport interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport interface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\nexport interface Discharge {\n  date: DateString;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: Discharge;\n}\n\nexport interface SickLeave {\n  startDate: DateString;\n  endDate: DateString;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave?: SickLeave;\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\nexport type NewEntry = UnionOmit<Entry, 'id'>;\n\nexport interface Patient {\n  id: string;\n  name: string;\n  dateOfBirth: DateString;\n  ssn: string;\n  gender: Gender;\n  occupation: string;\n  entries: Entry[];\n}\n\nexport enum Gender {\n  Male = 'male',\n  TransMale = 'transmale',\n  Female = 'female',\n  TransFemale = 'transfemale',\n  GenderQueer = 'genderqueer',\n  Other = 'other',\n  Unknown = 'unknown',\n}\n\nexport type NewPatient = UnionOmit<Patient, 'id'>;\n\nexport type PublicPatient = UnionOmit<Patient, 'ssn' | 'entries' >;\n\nexport type DateString = string;\n\nexport type TemporaryFormType =  {date: DateString; description: string};","export const apiBaseUrl = 'http://localhost:3001/api';\n","import { State } from './state';\nimport { Patient, Diagnosis } from '../types';\n\nexport const setPatientList = (patientListFromApi: Patient[]): Action => ({ \n  type: 'SET_PATIENT_LIST', \n  payload: patientListFromApi \n});\n\nexport const setDiagnosesList = (diagnosesListFromApi: Diagnosis[]): Action => ({ \n  type: 'SET_DIAGNOSES_LIST', \n  payload: diagnosesListFromApi \n});\n\nexport const addPatient = (patient: Patient): Action => ({ \n  type: 'ADD_PATIENT',\n  payload: patient\n});\n\nexport const updatePatient = (patient: Patient): Action => ({ \n  type: 'UPDATE_PATIENT',\n  payload: patient\n});\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT' | 'UPDATE_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSES_LIST'; \n      payload: Diagnosis[];\n  };\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n  case 'SET_PATIENT_LIST':\n    return {\n      ...state,\n      patients: {\n        ...action.payload.reduce(\n          (otherPatients, patient) => ({ ...otherPatients, [patient.id]: patient }),\n          {}\n        ),\n        ...state.patients\n      }\n    };\n  case 'SET_DIAGNOSES_LIST':\n    return {\n      ...state,\n      diagnoses: {\n        ...action.payload.reduce(\n          (otherDiagnoses, diagnosis) => ({ ...otherDiagnoses, [diagnosis.code]: diagnosis }),\n          {}\n        ),\n        ...state.diagnoses\n      }\n    };\n  case 'ADD_PATIENT':\n  case 'UPDATE_PATIENT':\n    return {\n      ...state,\n      patients: {\n        ...state.patients,\n        [action.payload.id]: action.payload\n      }\n    };\n  default:\n    return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Patient, Diagnosis } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnoses: { [id: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnoses: {}\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { Diagnosis, Gender, Entry } from '../types';\n\n\n// --- Generic ---\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectFieldProps<T extends SelectOption> {\n  name: string;\n  label: string;\n  options: T[];\n}\n\n\nexport const SelectField = <T extends SelectOption, >({\n  name,\n  label,\n  options,\n}: SelectFieldProps<T>) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as=\"select\" name={name} className=\"ui dropdown\"  >\n      {options.map(option => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\n// -------------\n\n\n// Gender\nexport interface GenderOption extends SelectOption {\n  value: Gender;\n}\n\nexport const GenderSelectField: React.FC<SelectFieldProps<GenderOption>> = (props) => (\n  SelectField<GenderOption>(props)\n);\n// -------------\n\n\n\n// Entry['type']\nexport interface EntryTypeOption extends SelectOption {\n  value: Entry['type'];\n}\n\nexport const EntryTypeSelectField: React.FC<SelectFieldProps<EntryTypeOption>> = (props) => (\n  SelectField<EntryTypeOption>(props)\n);\n// -------------\n\n\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\ninterface TextFieldManagedProps extends FieldProps {\n  label: string;\n  placeholder: string;\n  value: string;\n  onChange?: ((event: React.ChangeEvent<HTMLInputElement>) => void);\n}\n\nexport const TextFieldManaged: React.FC<TextFieldManagedProps> = ({\n  field,\n  label,\n  placeholder,\n  value,\n  onChange\n}) => (\n  <Form.Field>\n  <label>{label}</label>\n  <input type='text' placeholder={placeholder} value={value} onChange={onChange}/>\n  <div style={{ color:'red' }}>\n    <ErrorMessage name={field.name} />\n  </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({ field, label, min, max }) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color:'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map(diagnosis => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, GenderSelectField, GenderOption } from '../components/FormFields';\nimport { Gender, Patient } from '../types';\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, 'id' | 'entries'>;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst upperFirst = (str: string): string => (str.charAt(0).toUpperCase() + str.slice(1)); \n\nconst genderOptions: GenderOption[] = Object.values(Gender).map(genderValue => {\n  if (genderValue === 'other') {\n    return {value: genderValue, label: 'Something Else'};\n  }\n  if (genderValue === 'unknown') {\n    return {value: genderValue, label: 'Decline to Answer'};\n  }\n  return {value: genderValue, label: upperFirst(genderValue)};\n});\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        ssn: '',\n        dateOfBirth: '',\n        occupation: '',\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <GenderSelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Container, Table, Button,  } from 'semantic-ui-react';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue } from '../state';\nimport { addPatient } from '../state/reducer';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    console.log(\"submitNewPatient:\", values);\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Container textAlign=\"center\">\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell><Link to={`/${patient.id}`}>{patient.name}</Link></Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nimport { Gender } from '../types';\n\ninterface GenderIconProps {\n  gender: Gender;\n}\n\nconst GenderIcon: React.FC<GenderIconProps> =  ({gender}) => {\n  switch (gender) {\n  case 'male':\n    return <Icon name=\"mars\"/>;\n  case 'female':\n    return <Icon name=\"venus\"/>;\n  case 'transmale':\n  case 'transfemale':\n    return <Icon name=\"transgender alternate\"/>;\n  case 'genderqueer':\n    return <Icon name=\"mercury\"/>;\n  default:\n    return <Icon name=\"genderless\"/>;\n  }\n};\n\nexport default GenderIcon;","import React, { ReactNode } from 'react';\nimport { Card, Icon, SemanticICONS } from 'semantic-ui-react';\n\nimport { Entry, HospitalEntry, OccupationalHealthcareEntry, HealthCheckEntry } from '../types';\nimport { assertNever } from '../utils';\n\ninterface BaseEntryDetails {\n  entry: Entry;\n  icon: SemanticICONS;\n  extras?: ReactNode;\n  headers?: ReactNode;\n}\n\nconst BaseEntryDetals: React.FC<BaseEntryDetails> = ({entry, icon, children, extras, headers}) => (\n  <Card fluid>\n    <Card.Content>\n      <Card.Header>{entry.date}<Icon name={icon} size='large'/>{headers}</Card.Header>\n      <Card.Description>\n        <em>{entry.description}</em>\n      </Card.Description>\n      { children }\n    </Card.Content>\n    <Card.Content extra>\n      { extras }\n    </Card.Content>\n  </Card>\n);\n\nconst HealthCheckDetails:  React.FC<{entry: HealthCheckEntry }> = ({entry, children}) => (\n  <BaseEntryDetals entry={entry} icon=\"doctor\" extras={children}>\n    <Icon name='heart' color={\n      entry.healthCheckRating === 0 ? 'green'\n      : entry.healthCheckRating === 1 ? 'yellow'\n      : entry.healthCheckRating === 2 ? 'orange'\n      : 'red'\n    }/>\n  </BaseEntryDetals>\n);\n\nconst OccupationalHealthcareDetails:  React.FC<{entry: OccupationalHealthcareEntry }> = ({entry, children}) => (\n  <BaseEntryDetals entry={entry} icon=\"stethoscope\" extras={children} headers={<>{entry.employerName}</>}>\n    { entry.sickLeave && \n      <>\n        <h4>Sick leave:</h4>\n        <ul>\n          <li><strong>From:</strong> {entry.sickLeave.startDate}</li>\n          <li><strong>To:</strong> {entry.sickLeave.endDate}</li>\n        </ul>\n      </>\n      \n    }\n  </BaseEntryDetals>\n);\n\nconst HospitalDetails:  React.FC<{entry: HospitalEntry }> = ({entry, children}) => (\n  <BaseEntryDetals entry={entry} icon=\"hospital symbol\" extras={children}>\n    <ul>\n      <li><strong>Discharged on:</strong> {entry.discharge.date}</li>\n      <li><strong>Criteria:</strong> {entry.discharge.criteria}</li>\n    </ul>\n  </BaseEntryDetals>\n);\n\n\nconst EntryDetails: React.FC<{entry: Entry}> = ({entry, children}) => {\n  switch (entry.type) {\n    case 'HealthCheck':\n      return <HealthCheckDetails entry={entry}>{children}</HealthCheckDetails>;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcareDetails entry={entry}>{children}</OccupationalHealthcareDetails>;\n    case 'Hospital':\n      return <HospitalDetails entry={entry}>{children}</HospitalDetails>;\n    default:\n      return assertNever(entry);\n  }\n};\n\nexport default EntryDetails;","/**\n * Helper function for exhaustive type checking\n */\nexport const assertNever = (value: never): never => {\n  throw new Error(\n    `Unhandled discriminated union member: ${JSON.stringify(value)}`\n  );\n};","import React from 'react';\n\nimport { Diagnosis } from '../types';\n\nconst DiagnosesList: React.FC<{diagnoses: Array<Diagnosis>}> = ({diagnoses}) => (\n  <>\n    {diagnoses.map((diagnosis) => \n      <li key={diagnosis.code}>{diagnosis.code} <em>{diagnosis.name}</em></li>\n    )}\n  </>\n);\n\nexport default DiagnosesList;","import React, { useState } from 'react';\nimport { Grid, Button, Form as UIForm } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, DiagnosisSelection, NumberField } from '../components/FormFields';\nimport { BaseEntry, NewEntry, HealthCheckEntry, HospitalEntry, OccupationalHealthcareEntry,\n        Entry} from '../types';\n\nimport { useStateValue } from '../state';\n\ninterface Props {\n  onSubmit: (data: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst entryTypeOptions: { value: Entry['type']; label: string }[] = [\n  { value: \"HealthCheck\", label: \"Health check\"},\n  { value: \"OccupationalHealthcare\", label: \"Occupational healthcare\"},\n  { value: \"Hospital\", label: \"Hospital\"},\n];\n\nexport interface EntryFormValues extends \n  Omit<HospitalEntry, 'type'|'id'>, \n  Omit<HealthCheckEntry, 'type'|'id'>, \n  Omit<OccupationalHealthcareEntry, 'type'|'id'> {\n    type: Entry['type'] | '';\n}\n\nexport const AddEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  const [{ diagnoses }] = useStateValue();\n  const [formType, setFormType] = useState<NewEntry['type']>('HealthCheck');\n\n  const baseValues: Omit<BaseEntry, 'id'> = {\n    description: '',\n    date: '',\n    specialist: '',\n    diagnosisCodes: [],\n  };\n\n  const healthCheckValues: Omit<HealthCheckEntry, 'id'> = {\n    ...baseValues,\n    type: 'HealthCheck',\n    healthCheckRating: 0\n  };\n\n  const hospitalValues: Omit<HospitalEntry, 'id'> = {\n    ...baseValues,\n    type: 'Hospital',\n    discharge: {\n      date: '',\n      criteria: ''\n    }\n  };\n\n  const occupationalHealthcareValues: Omit<OccupationalHealthcareEntry, 'id'> = {\n    ...baseValues,\n    type: 'OccupationalHealthcare',\n    employerName: '',\n    sickLeave: {\n      startDate: '',\n      endDate: ''\n    }\n  };\n\n  const initialValues: EntryFormValues = {\n    ...baseValues,\n    ...healthCheckValues,\n    ...hospitalValues,\n    ...occupationalHealthcareValues,\n    type: 'HealthCheck'\n  };\n\n  const prepareSubmission = (values: EntryFormValues): EntryFormValues => ({\n    ...values,\n    sickLeave: (\n      values.sickLeave?.startDate !== '' && values.sickLeave?.endDate !== ''\n      ) ? values.sickLeave : undefined\n  });\n\n  const isValidDate = (x: string): boolean => (\n    x.length === 10 && !isNaN(Date.parse(x))\n  );\n\n  return (\n  <Formik\n      initialValues={initialValues}\n      onSubmit={(v) => onSubmit(prepareSubmission(v))}\n      validate={values => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: ({ [subfield: string]: string} | string ) }  = {};\n\n        // Basic mandatory\n        if (!values.description) { errors.description = requiredError; }\n        if (!values.specialist) { errors.specialist = requiredError; }\n\n        if (!values.date) { errors.date = requiredError; }\n        else if (!isValidDate(values.date)) { \n          errors.date = \"Wrong format. Use YYYY-MM-DD format\"; \n        }\n        \n\n        // Specific fields\n        switch (formType) {\n          case \"HealthCheck\":\n            if (values.healthCheckRating === undefined) { errors.healthCheckRating = requiredError; }\n            else if (values.healthCheckRating < 0 || values.healthCheckRating > 3) {\n              errors.healthCheckRating = \"The value must be in range 0-3\";\n            }\n            break;\n\n          case \"Hospital\":\n            if (!values.discharge.criteria) { errors.discharge = { criteria: requiredError }; }\n            if (!values.discharge.date) { errors[\"discharge.date\"] = requiredError; }\n            else if (!isValidDate(values.discharge.date)) { \n              errors.discharge = { date: \"Wrong format. Use YYYY-MM-DD format\" };\n            }\n            break;\n\n          case \"OccupationalHealthcare\":\n            if (!values.employerName) { errors.employerName = requiredError; }\n            \n            if (values.sickLeave?.startDate && !isValidDate(values.sickLeave.startDate)) { \n              errors.sickLeave = { startDate:\"Wrong format. Use YYYY-MM-DD format\" }; \n            }\n\n            if (values.sickLeave?.endDate && !isValidDate(values.sickLeave.endDate)) { \n              errors.sickLeave = { endDate:\"Wrong format. Use YYYY-MM-DD format\" }; \n            }\n\n            break;\n        }\n\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\n        return (\n          <Form className=\"form ui\">\n            <UIForm.Select \n              label=\"Entry type\"\n              name=\"type\"\n              value={formType}\n              onChange={(_event, data) => {\n                setFormType(data.value as Entry['type']);\n                setFieldTouched('type', true);\n                setFieldValue('type', data.value as Entry['type']);\n              }}\n              options={entryTypeOptions.map(({ value, label: text }) => (\n                {key: value, value, text }\n              ))}\n            />\n\n            <Field\n              label=\"Description\"\n              placeholder=\"describe the entry\"\n              name=\"description\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"date\"\n              component={TextField}\n            />\n            <Field\n              label=\"Specialist\"\n              placeholder=\"Name Surname\"\n              name=\"specialist\"\n              component={TextField}\n            />\n            \n            {\n              formType === 'HealthCheck' &&\n              <Field\n                label=\"Health Check Rating\"\n                name=\"healthCheckRating\"\n                component={NumberField}\n                min={0}\n                max={3}\n              />\n            }\n            {\n              formType === 'Hospital' &&\n              <>\n                <Field\n                  label=\"Discharge Date\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"discharge.date\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Discharge Criteria\"\n                  placeholder=\"criteria\"\n                  name=\"discharge.criteria\"\n                  component={TextField}\n                />\n              </>\n            }\n\n            {\n              formType === 'OccupationalHealthcare' &&\n              <>\n                <Field\n                  label=\"Employer name\"\n                  placeholder=\"ACME Inc.\"\n                  name=\"employerName\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Sick Leave (Start Date)\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.startDate\"\n                  component={TextField}\n                />\n                <Field\n                  label=\"Sick Leave (End Date)\"\n                  placeholder=\"YYYY-MM-DD\"\n                  name=\"sickLeave.endDate\"\n                  component={TextField}\n                />\n              </>\n            }\n\n            <DiagnosisSelection\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              diagnoses={Object.values(diagnoses)}\n            />        \n\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );  \n};\n\nexport default AddEntryForm;","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new Entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddEntryModal;\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Container, List, Card, Button } from 'semantic-ui-react';\nimport { useParams } from 'react-router-dom';\n\nimport GenderIcon from '../components/GenderIcon';\nimport EntryDetails from '../components/EntryDetails';\nimport DiagnosesList from '../components/DiagnosesList';\nimport { useStateValue, updatePatient } from '../state';\nimport { apiBaseUrl } from '../constants';\nimport { Diagnosis, Patient } from '../types';\nimport AddEntryModal from '../AddEntryModal';\nimport { EntryFormValues } from '../AddEntryModal/AddEntryForm';\n\nconst PatientDetailPage: React.FC = () => {\n  const { id: patientIdMatch } = useParams<{ id: string }>();\n  const [{ patients, diagnoses }, dispatch] = useStateValue();\n  const patient = patients[patientIdMatch];\n\n  const [modalOpen, setModalOpen] = useState<boolean>(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewEntry = async (data: EntryFormValues) => {\n    console.log('submitNewEntry:', data);\n    \n    try {\n      const { data: updatedPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients/${patient.id}/entries`, data);\n      dispatch(updatePatient(updatedPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  if (!patient) {\n    return (\n      <Container>\n        <h1>No patient found with such ID</h1>\n        <pre>Submitted ID: {patientIdMatch}</pre>\n      </Container>\n    );\n  }\n  return (\n    <div className=\"App\">\n      <Container>\n        <h1>{patient.name}<GenderIcon gender={patient.gender} /></h1>\n        <List>\n          <List.Item>ssn: {patient.ssn}</List.Item>\n          <List.Item>occupation: {patient.occupation}</List.Item>\n        </List>\n\n        {\n          patient.entries.length === 0\n          ? <h2>No entries</h2>\n          : <div>\n            <h2>Entries:</h2>\n            <Card.Group>\n              {patient.entries.map(entry =>\n                <EntryDetails key={entry.id} entry={entry}>\n                  {\n                  entry.diagnosisCodes \n                  ? <DiagnosesList diagnoses={entry.diagnosisCodes.map((code): Diagnosis =>\n                      diagnoses[code] ?? {code, name: \"Unknown\"}\n                    )} />\n                  : <p>No diagnosis code available for this entry</p>\n                  }\n                </EntryDetails>\n              )}\n            </Card.Group>\n          </div>\n        }\n      </Container>\n\n      <AddEntryModal\n        \n        modalOpen={modalOpen}\n        onSubmit={submitNewEntry}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button style={{marginTop: 1 + 'em'}} onClick={openModal}>Add New Entry</Button>\n    </div>\n  );\n};\n\nexport default PatientDetailPage;\n","import React, { useEffect } from 'react';\nimport axios from 'axios';\nimport { Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { useStateValue } from './state';\nimport { Patient, Diagnosis } from './types';\nimport { setDiagnosesList, setPatientList } from './state/reducer';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetailPage from './PatientDetailPage';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    \n    const fetchDiagnosesList = async () => {\n      try {\n        const { data: diagnosesListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnoses`\n        );\n        dispatch(setDiagnosesList(diagnosesListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    fetchPatientList();\n    fetchDiagnosesList();\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header as=\"h1\">Patientor</Header>\n        <Button as={Link} to=\"/\" primary>\n          Home\n        </Button>\n        <Divider hidden />\n        <Switch>\n          <Route path=\"/:id\">\n            <PatientDetailPage />\n          </Route>\n          <Route path=\"/\">\n            <PatientListPage />\n          </Route>\n        </Switch>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from './state';\n\nReactDOM.render(\n  <Router>\n    <StateProvider reducer={reducer}>\n      <App />\n    </StateProvider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}